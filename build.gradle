buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
		classpath 'com.github.johnrengelman:shadow:8.1.1'
	}
}


apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {

	mappings channel: mappings_channel, version: mappings_version

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run/client')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

		}

		server {
			workingDirectory project.file('run/server')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	mavenCentral()
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	shadow group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlin_version
	shadow group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
	shadow group: "org.jetbrains", name: "annotations", version: annotations_version
	shadow group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
	shadow group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version

	compileOnly group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlin_version
	compileOnly group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
	compileOnly group: "org.jetbrains", name: "annotations", version: annotations_version
	compileOnly group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
	compileOnly group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version
}

def resourceTargets = ['mcmod.info', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: archivesBaseName, mod_version: mod_version.replace('\n', '\\n'), minecraft_version: minecraft_version]
processResources {
	inputs.properties replaceProperties
	replaceProperties.put 'project', project

	filesMatching(resourceTargets) {
		expand replaceProperties
	}

	intoTargets.each { target ->
		if (file(target).exists()) {
			copy {
				from(sourceSets.main.resources) {
					include resourceTargets
					expand replaceProperties
				}
				into target
			}
		}
	}
}

def modFileTokens = [VERSION: mod_version]
def included = ["${mod_base_package.replace('.', '/')}/${mod_main_class}.kt".toString()]

def expandedSrc = new File(project.buildDir, 'expandedSrc')
def srcMainJava = project.file('src/main/kotlin').toPath()
def includedPaths = included.collect { java.nio.file.Paths.get(it) }
task javaReplaceTokens(type: Copy) {
	inputs.property 'tokens', modFileTokens
	from(srcMainJava) {
		include included
	}
	into expandedSrc
	filter(org.apache.tools.ant.filters.ReplaceTokens, beginToken: '@', endToken: '@', tokens: modFileTokens)
}


compileJava {
	dependsOn javaReplaceTokens
	exclude {
		srcMainJava.relativize(it.file.toPath()) in includedPaths
	}
	source expandedSrc
}

jar {
	manifest {
		attributes "FMLCorePlugin": "net.shadowfacts.forgelin.preloader.ForgelinPlugin",
				"FMLCorePluginContainsFMLMod": "true"
	}
}

shadowJar {
	archiveBaseName = mod_main_class + "-kappa-" + minecraft_version + "-" + mod_version
	archiveClassifier = ""
	dependencies {
		include(dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"))
		include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"))
		include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"))
		include(dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"))
		include(dependency("org.jetbrains:annotations:${annotations_version}"))
		include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}"))
		include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutines_version}"))
	}
	configurations = [project.configurations.compileClasspath]

	manifest {
		attributes "FMLCorePlugin": "net.shadowfacts.forgelin.preloader.ForgelinPlugin",
				"FMLCorePluginContainsFMLMod": "true"
	}
}

jar.finalizedBy('reobfJar')

artifacts {
	archives(shadowJar)
	shadow(shadowJar)
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/mcmodsrepo"
		}
	}
}
